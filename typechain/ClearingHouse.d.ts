/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface ClearingHouseInterface extends ethers.utils.Interface {
  functions: {
    "addMargin(address,tuple)": FunctionFragment
    "backstopLiquidityProviderMap(address)": FunctionFragment
    "closePosition(address,tuple)": FunctionFragment
    "feePool()": FunctionFragment
    "getLatestCumulativePremiumFraction(address)": FunctionFragment
    "getMarginRatio(address,address)": FunctionFragment
    "getPosition(address,address)": FunctionFragment
    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": FunctionFragment
    "getUnadjustedPosition(address,address)": FunctionFragment
    "initMarginRatio()": FunctionFragment
    "initialize(uint256,uint256,uint256,uint256,address)": FunctionFragment
    "insuranceFund()": FunctionFragment
    "liquidate(address,address)": FunctionFragment
    "liquidateWithSlippage(address,address,tuple)": FunctionFragment
    "liquidationFeeRatio()": FunctionFragment
    "maintenanceMarginRatio()": FunctionFragment
    "openInterestNotionalMap(address)": FunctionFragment
    "openPosition(address,uint8,tuple,tuple,tuple)": FunctionFragment
    "owner()": FunctionFragment
    "partialLiquidationRatio()": FunctionFragment
    "paused()": FunctionFragment
    "payFunding(address)": FunctionFragment
    "removeMargin(address,tuple)": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "setBackstopLiquidityProvider(address,bool)": FunctionFragment
    "setLiquidationFeeRatio(tuple)": FunctionFragment
    "setMaintenanceMarginRatio(tuple)": FunctionFragment
    "setPartialLiquidationRatio(tuple)": FunctionFragment
    "setTollPool(address)": FunctionFragment
    "setWhitelist(address)": FunctionFragment
    "settlePosition(address)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "addMargin", values: [string, { d: BigNumberish }]): string
  encodeFunctionData(functionFragment: "backstopLiquidityProviderMap", values: [string]): string
  encodeFunctionData(functionFragment: "closePosition", values: [string, { d: BigNumberish }]): string
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string
  encodeFunctionData(functionFragment: "getLatestCumulativePremiumFraction", values: [string]): string
  encodeFunctionData(functionFragment: "getMarginRatio", values: [string, string]): string
  encodeFunctionData(functionFragment: "getPosition", values: [string, string]): string
  encodeFunctionData(
    functionFragment: "getPositionNotionalAndUnrealizedPnl",
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "getUnadjustedPosition", values: [string, string]): string
  encodeFunctionData(functionFragment: "initMarginRatio", values?: undefined): string
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: "insuranceFund", values?: undefined): string
  encodeFunctionData(functionFragment: "liquidate", values: [string, string]): string
  encodeFunctionData(
    functionFragment: "liquidateWithSlippage",
    values: [string, string, { d: BigNumberish }]
  ): string
  encodeFunctionData(functionFragment: "liquidationFeeRatio", values?: undefined): string
  encodeFunctionData(functionFragment: "maintenanceMarginRatio", values?: undefined): string
  encodeFunctionData(functionFragment: "openInterestNotionalMap", values: [string]): string
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [string, BigNumberish, { d: BigNumberish }, { d: BigNumberish }, { d: BigNumberish }]
  ): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "partialLiquidationRatio", values?: undefined): string
  encodeFunctionData(functionFragment: "paused", values?: undefined): string
  encodeFunctionData(functionFragment: "payFunding", values: [string]): string
  encodeFunctionData(functionFragment: "removeMargin", values: [string, { d: BigNumberish }]): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "setBackstopLiquidityProvider", values: [string, boolean]): string
  encodeFunctionData(functionFragment: "setLiquidationFeeRatio", values: [{ d: BigNumberish }]): string
  encodeFunctionData(functionFragment: "setMaintenanceMarginRatio", values: [{ d: BigNumberish }]): string
  encodeFunctionData(functionFragment: "setPartialLiquidationRatio", values: [{ d: BigNumberish }]): string
  encodeFunctionData(functionFragment: "setTollPool", values: [string]): string
  encodeFunctionData(functionFragment: "setWhitelist", values: [string]): string
  encodeFunctionData(functionFragment: "settlePosition", values: [string]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string

  decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "backstopLiquidityProviderMap", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "closePosition", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getLatestCumulativePremiumFraction", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getMarginRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getPosition", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getPositionNotionalAndUnrealizedPnl", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getUnadjustedPosition", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initMarginRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "insuranceFund", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "liquidateWithSlippage", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "liquidationFeeRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "maintenanceMarginRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "openInterestNotionalMap", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "openPosition", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "partialLiquidationRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "payFunding", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "removeMargin", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setBackstopLiquidityProvider", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setLiquidationFeeRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setMaintenanceMarginRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setPartialLiquidationRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setTollPool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setWhitelist", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "settlePosition", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result

  events: {
    "BackstopLiquidityProviderChanged(address,bool)": EventFragment
    "LiquidationFeeRatioChanged(uint256)": EventFragment
    "MarginChanged(address,address,int256,int256)": EventFragment
    "MarginRatioChanged(uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "Paused(address)": EventFragment
    "PositionAdjusted(address,address,int256,uint256,uint256)": EventFragment
    "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)": EventFragment
    "PositionLiquidated(address,address,uint256,uint256,uint256,address,uint256)": EventFragment
    "PositionSettled(address,address,uint256)": EventFragment
    "ReferredPositionChanged(bytes32)": EventFragment
    "RestrictionModeEntered(address,uint256)": EventFragment
    "Unpaused(address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "BackstopLiquidityProviderChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LiquidationFeeRatioChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "MarginChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "MarginRatioChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PositionAdjusted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "PositionSettled"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ReferredPositionChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "RestrictionModeEntered"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment
}

export class ClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ClearingHouseInterface

  functions: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    backstopLiquidityProviderMap(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    feePool(overrides?: CallOverrides): Promise<[string]>

    getLatestCumulativePremiumFraction(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>

    getPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber }
          margin: [BigNumber] & { d: BigNumber }
          openNotional: [BigNumber] & { d: BigNumber }
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
          liquidityHistoryIndex: BigNumber
          blockNumber: BigNumber
        }
      ]
    >

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
        positionNotional: [BigNumber] & { d: BigNumber }
        unrealizedPnl: [BigNumber] & { d: BigNumber }
      }
    >

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber }
          margin: [BigNumber] & { d: BigNumber }
          openNotional: [BigNumber] & { d: BigNumber }
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
          liquidityHistoryIndex: BigNumber
          blockNumber: BigNumber
        }
      ] & {
        position: [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber }
          margin: [BigNumber] & { d: BigNumber }
          openNotional: [BigNumber] & { d: BigNumber }
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
          liquidityHistoryIndex: BigNumber
          blockNumber: BigNumber
        }
      }
    >

    initMarginRatio(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _partialLiquidationRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    insuranceFund(overrides?: CallOverrides): Promise<[string]>

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    liquidateWithSlippage(
      _amm: string,
      _trader: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    liquidationFeeRatio(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>

    openInterestNotionalMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    partialLiquidationRatio(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    payFunding(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPartialLiquidationRatio(
      _ratio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setTollPool(
      _feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    settlePosition(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  addMargin(
    _amm: string,
    _addedMargin: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  backstopLiquidityProviderMap(arg0: string, overrides?: CallOverrides): Promise<boolean>

  closePosition(
    _amm: string,
    _quoteAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  feePool(overrides?: CallOverrides): Promise<string>

  getLatestCumulativePremiumFraction(
    _amm: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>

  getMarginRatio(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>

  getPosition(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber }
      margin: [BigNumber] & { d: BigNumber }
      openNotional: [BigNumber] & { d: BigNumber }
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
      liquidityHistoryIndex: BigNumber
      blockNumber: BigNumber
    }
  >

  getPositionNotionalAndUnrealizedPnl(
    _amm: string,
    _trader: string,
    _pnlCalcOption: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
      positionNotional: [BigNumber] & { d: BigNumber }
      unrealizedPnl: [BigNumber] & { d: BigNumber }
    }
  >

  getUnadjustedPosition(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber }
      margin: [BigNumber] & { d: BigNumber }
      openNotional: [BigNumber] & { d: BigNumber }
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
      liquidityHistoryIndex: BigNumber
      blockNumber: BigNumber
    }
  >

  initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _initMarginRatio: BigNumberish,
    _maintenanceMarginRatio: BigNumberish,
    _partialLiquidationRatio: BigNumberish,
    _liquidationFeeRatio: BigNumberish,
    _insuranceFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  insuranceFund(overrides?: CallOverrides): Promise<string>

  liquidate(
    _amm: string,
    _trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  liquidateWithSlippage(
    _amm: string,
    _trader: string,
    _quoteAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>

  maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>

  openInterestNotionalMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  openPosition(
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  partialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>

  paused(overrides?: CallOverrides): Promise<boolean>

  payFunding(
    _amm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeMargin(
    _amm: string,
    _removedMargin: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setBackstopLiquidityProvider(
    account: string,
    isProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setLiquidationFeeRatio(
    _liquidationFeeRatio: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMaintenanceMarginRatio(
    _maintenanceMarginRatio: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setPartialLiquidationRatio(
    _ratio: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setTollPool(
    _feePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWhitelist(
    _whitelist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  settlePosition(
    _amm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addMargin(_amm: string, _addedMargin: { d: BigNumberish }, overrides?: CallOverrides): Promise<void>

    backstopLiquidityProviderMap(arg0: string, overrides?: CallOverrides): Promise<boolean>

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    feePool(overrides?: CallOverrides): Promise<string>

    getLatestCumulativePremiumFraction(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>

    getPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber }
        margin: [BigNumber] & { d: BigNumber }
        openNotional: [BigNumber] & { d: BigNumber }
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
        liquidityHistoryIndex: BigNumber
        blockNumber: BigNumber
      }
    >

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
        positionNotional: [BigNumber] & { d: BigNumber }
        unrealizedPnl: [BigNumber] & { d: BigNumber }
      }
    >

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber }
        margin: [BigNumber] & { d: BigNumber }
        openNotional: [BigNumber] & { d: BigNumber }
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
        liquidityHistoryIndex: BigNumber
        blockNumber: BigNumber
      }
    >

    initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _partialLiquidationRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      overrides?: CallOverrides
    ): Promise<void>

    insuranceFund(overrides?: CallOverrides): Promise<string>

    liquidate(_amm: string, _trader: string, overrides?: CallOverrides): Promise<void>

    liquidateWithSlippage(
      _amm: string,
      _trader: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, boolean] & {
        quoteAssetAmount: [BigNumber] & { d: BigNumber }
        isPartialClose: boolean
      }
    >

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>

    openInterestNotionalMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    partialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<boolean>

    payFunding(_amm: string, overrides?: CallOverrides): Promise<void>

    removeMargin(_amm: string, _removedMargin: { d: BigNumberish }, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    setPartialLiquidationRatio(_ratio: { d: BigNumberish }, overrides?: CallOverrides): Promise<void>

    setTollPool(_feePool: string, overrides?: CallOverrides): Promise<void>

    setWhitelist(_whitelist: string, overrides?: CallOverrides): Promise<void>

    settlePosition(_amm: string, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    BackstopLiquidityProviderChanged(
      account?: string | null,
      isProvider?: boolean | null
    ): TypedEventFilter<[string, boolean], { account: string; isProvider: boolean }>

    LiquidationFeeRatioChanged(
      liquidationFeeRatio?: null
    ): TypedEventFilter<[BigNumber], { liquidationFeeRatio: BigNumber }>

    MarginChanged(
      sender?: string | null,
      amm?: string | null,
      amount?: null,
      fundingPayment?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sender: string
        amm: string
        amount: BigNumber
        fundingPayment: BigNumber
      }
    >

    MarginRatioChanged(marginRatio?: null): TypedEventFilter<[BigNumber], { marginRatio: BigNumber }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    Paused(account?: null): TypedEventFilter<[string], { account: string }>

    PositionAdjusted(
      amm?: string | null,
      trader?: string | null,
      newPositionSize?: null,
      oldLiquidityIndex?: null,
      newLiquidityIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        amm: string
        trader: string
        newPositionSize: BigNumber
        oldLiquidityIndex: BigNumber
        newLiquidityIndex: BigNumber
      }
    >

    PositionChanged(
      trader?: string | null,
      amm?: string | null,
      margin?: null,
      positionNotional?: null,
      exchangedPositionSize?: null,
      fee?: null,
      positionSizeAfter?: null,
      realizedPnl?: null,
      unrealizedPnlAfter?: null,
      badDebt?: null,
      liquidationPenalty?: null,
      spotPrice?: null,
      fundingPayment?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string
        amm: string
        margin: BigNumber
        positionNotional: BigNumber
        exchangedPositionSize: BigNumber
        fee: BigNumber
        positionSizeAfter: BigNumber
        realizedPnl: BigNumber
        unrealizedPnlAfter: BigNumber
        badDebt: BigNumber
        liquidationPenalty: BigNumber
        spotPrice: BigNumber
        fundingPayment: BigNumber
      }
    >

    PositionLiquidated(
      trader?: string | null,
      amm?: string | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null,
      badDebt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        trader: string
        amm: string
        positionNotional: BigNumber
        positionSize: BigNumber
        liquidationFee: BigNumber
        liquidator: string
        badDebt: BigNumber
      }
    >

    PositionSettled(
      amm?: string | null,
      trader?: string | null,
      valueTransferred?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { amm: string; trader: string; valueTransferred: BigNumber }
    >

    ReferredPositionChanged(
      referralCode?: BytesLike | null
    ): TypedEventFilter<[string], { referralCode: string }>

    RestrictionModeEntered(
      amm?: null,
      blockNumber?: null
    ): TypedEventFilter<[string, BigNumber], { amm: string; blockNumber: BigNumber }>

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>
  }

  estimateGas: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    backstopLiquidityProviderMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    feePool(overrides?: CallOverrides): Promise<BigNumber>

    getLatestCumulativePremiumFraction(_amm: string, overrides?: CallOverrides): Promise<BigNumber>

    getMarginRatio(_amm: string, _trader: string, overrides?: CallOverrides): Promise<BigNumber>

    getPosition(_amm: string, _trader: string, overrides?: CallOverrides): Promise<BigNumber>

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUnadjustedPosition(_amm: string, _trader: string, overrides?: CallOverrides): Promise<BigNumber>

    initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _partialLiquidationRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    liquidateWithSlippage(
      _amm: string,
      _trader: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>

    openInterestNotionalMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    partialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    payFunding(_amm: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setPartialLiquidationRatio(
      _ratio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setTollPool(
      _feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    settlePosition(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    backstopLiquidityProviderMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getLatestCumulativePremiumFraction(_amm: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMarginRatio(_amm: string, _trader: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPosition(_amm: string, _trader: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _partialLiquidationRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    liquidateWithSlippage(
      _amm: string,
      _trader: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    liquidationFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>

    openInterestNotionalMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    partialLiquidationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payFunding(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setPartialLiquidationRatio(
      _ratio: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setTollPool(
      _feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    settlePosition(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
