/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface ClearingHouseViewerInterface extends ethers.utils.Interface {
  functions: {
    "clearingHouse()": FunctionFragment
    "getFreeCollateral(address,address)": FunctionFragment
    "getMarginRatio(address,address)": FunctionFragment
    "getPersonalBalanceWithFundingPayment(address,address)": FunctionFragment
    "getPersonalPositionWithFundingPayment(address,address)": FunctionFragment
    "getUnrealizedPnl(address,address,uint8)": FunctionFragment
    "isPositionNeedToBeMigrated(address,address)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "clearingHouse", values?: undefined): string
  encodeFunctionData(functionFragment: "getFreeCollateral", values: [string, string]): string
  encodeFunctionData(functionFragment: "getMarginRatio", values: [string, string]): string
  encodeFunctionData(
    functionFragment: "getPersonalBalanceWithFundingPayment",
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: "getPersonalPositionWithFundingPayment",
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: "getUnrealizedPnl", values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: "isPositionNeedToBeMigrated", values: [string, string]): string

  decodeFunctionResult(functionFragment: "clearingHouse", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getFreeCollateral", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getMarginRatio", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getPersonalBalanceWithFundingPayment", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getPersonalPositionWithFundingPayment", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getUnrealizedPnl", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isPositionNeedToBeMigrated", data: BytesLike): Result

  events: {}
}

export class ClearingHouseViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ClearingHouseViewerInterface

  functions: {
    clearingHouse(overrides?: CallOverrides): Promise<[string]>

    getFreeCollateral(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & {
        margin: [BigNumber] & { d: BigNumber }
      }
    >

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber }
          margin: [BigNumber] & { d: BigNumber }
          openNotional: [BigNumber] & { d: BigNumber }
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
          liquidityHistoryIndex: BigNumber
          blockNumber: BigNumber
        }
      ] & {
        position: [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber }
          margin: [BigNumber] & { d: BigNumber }
          openNotional: [BigNumber] & { d: BigNumber }
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
          liquidityHistoryIndex: BigNumber
          blockNumber: BigNumber
        }
      }
    >

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>

    isPositionNeedToBeMigrated(_amm: string, _trader: string, overrides?: CallOverrides): Promise<[boolean]>
  }

  clearingHouse(overrides?: CallOverrides): Promise<string>

  getFreeCollateral(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>

  getMarginRatio(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>

  getPersonalBalanceWithFundingPayment(
    _quoteToken: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>

  getPersonalPositionWithFundingPayment(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber }
      margin: [BigNumber] & { d: BigNumber }
      openNotional: [BigNumber] & { d: BigNumber }
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
      liquidityHistoryIndex: BigNumber
      blockNumber: BigNumber
    }
  >

  getUnrealizedPnl(
    _amm: string,
    _trader: string,
    _pnlCalcOption: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>

  isPositionNeedToBeMigrated(_amm: string, _trader: string, overrides?: CallOverrides): Promise<boolean>

  callStatic: {
    clearingHouse(overrides?: CallOverrides): Promise<string>

    getFreeCollateral(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber }
        margin: [BigNumber] & { d: BigNumber }
        openNotional: [BigNumber] & { d: BigNumber }
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber }
        liquidityHistoryIndex: BigNumber
        blockNumber: BigNumber
      }
    >

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>

    isPositionNeedToBeMigrated(_amm: string, _trader: string, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {}

  estimateGas: {
    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>

    getFreeCollateral(_amm: string, _trader: string, overrides?: CallOverrides): Promise<BigNumber>

    getMarginRatio(_amm: string, _trader: string, overrides?: CallOverrides): Promise<BigNumber>

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isPositionNeedToBeMigrated(_amm: string, _trader: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getFreeCollateral(_amm: string, _trader: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMarginRatio(_amm: string, _trader: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isPositionNeedToBeMigrated(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
