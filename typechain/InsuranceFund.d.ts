/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface InsuranceFundInterface extends ethers.utils.Interface {
  functions: {
    "addAmm(address)": FunctionFragment
    "exchange()": FunctionFragment
    "getAllAmms()": FunctionFragment
    "getQuoteTokenLength()": FunctionFragment
    "inflationMonitor()": FunctionFragment
    "initialize()": FunctionFragment
    "isExistedAmm(address)": FunctionFragment
    "minter()": FunctionFragment
    "owner()": FunctionFragment
    "perpToken()": FunctionFragment
    "quoteTokens(uint256)": FunctionFragment
    "removeAmm(address)": FunctionFragment
    "removeToken(address)": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "setBeneficiary(address)": FunctionFragment
    "setExchange(address)": FunctionFragment
    "setInflationMonitor(address)": FunctionFragment
    "setMinter(address)": FunctionFragment
    "shutdownAllAmm()": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "withdraw(address,tuple)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "addAmm", values: [string]): string
  encodeFunctionData(functionFragment: "exchange", values?: undefined): string
  encodeFunctionData(functionFragment: "getAllAmms", values?: undefined): string
  encodeFunctionData(functionFragment: "getQuoteTokenLength", values?: undefined): string
  encodeFunctionData(functionFragment: "inflationMonitor", values?: undefined): string
  encodeFunctionData(functionFragment: "initialize", values?: undefined): string
  encodeFunctionData(functionFragment: "isExistedAmm", values: [string]): string
  encodeFunctionData(functionFragment: "minter", values?: undefined): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "perpToken", values?: undefined): string
  encodeFunctionData(functionFragment: "quoteTokens", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "removeAmm", values: [string]): string
  encodeFunctionData(functionFragment: "removeToken", values: [string]): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "setBeneficiary", values: [string]): string
  encodeFunctionData(functionFragment: "setExchange", values: [string]): string
  encodeFunctionData(functionFragment: "setInflationMonitor", values: [string]): string
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string
  encodeFunctionData(functionFragment: "shutdownAllAmm", values?: undefined): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "withdraw", values: [string, { d: BigNumberish }]): string

  decodeFunctionResult(functionFragment: "addAmm", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getAllAmms", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getQuoteTokenLength", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "inflationMonitor", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isExistedAmm", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "perpToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "quoteTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "removeAmm", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "removeToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setBeneficiary", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setExchange", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setInflationMonitor", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "shutdownAllAmm", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result

  events: {
    "AmmAdded(address)": EventFragment
    "AmmRemoved(address)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "ShutdownAllAmms(uint256)": EventFragment
    "TokenAdded(address)": EventFragment
    "TokenRemoved(address)": EventFragment
    "Withdrawn(address,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "AmmAdded"): EventFragment
  getEvent(nameOrSignatureOrTopic: "AmmRemoved"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ShutdownAllAmms"): EventFragment
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment
}

export class InsuranceFund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: InsuranceFundInterface

  functions: {
    addAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    exchange(overrides?: CallOverrides): Promise<[string]>

    getAllAmms(overrides?: CallOverrides): Promise<[string[]]>

    getQuoteTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>

    inflationMonitor(overrides?: CallOverrides): Promise<[string]>

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<[boolean]>

    minter(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    perpToken(overrides?: CallOverrides): Promise<[string]>

    quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    removeAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setExchange(
      _exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    shutdownAllAmm(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  addAmm(
    _amm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  exchange(overrides?: CallOverrides): Promise<string>

  getAllAmms(overrides?: CallOverrides): Promise<string[]>

  getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>

  inflationMonitor(overrides?: CallOverrides): Promise<string>

  initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<boolean>

  minter(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  perpToken(overrides?: CallOverrides): Promise<string>

  quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  removeAmm(
    _amm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setBeneficiary(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setExchange(
    _exchange: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setInflationMonitor(
    _inflationMonitor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMinter(
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  shutdownAllAmm(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdraw(
    _quoteToken: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addAmm(_amm: string, overrides?: CallOverrides): Promise<void>

    exchange(overrides?: CallOverrides): Promise<string>

    getAllAmms(overrides?: CallOverrides): Promise<string[]>

    getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>

    inflationMonitor(overrides?: CallOverrides): Promise<string>

    initialize(overrides?: CallOverrides): Promise<void>

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<boolean>

    minter(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    perpToken(overrides?: CallOverrides): Promise<string>

    quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    removeAmm(_amm: string, overrides?: CallOverrides): Promise<void>

    removeToken(_token: string, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setBeneficiary(_beneficiary: string, overrides?: CallOverrides): Promise<void>

    setExchange(_exchange: string, overrides?: CallOverrides): Promise<void>

    setInflationMonitor(_inflationMonitor: string, overrides?: CallOverrides): Promise<void>

    setMinter(_minter: string, overrides?: CallOverrides): Promise<void>

    shutdownAllAmm(overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    withdraw(_quoteToken: string, _amount: { d: BigNumberish }, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    AmmAdded(amm?: null): TypedEventFilter<[string], { amm: string }>

    AmmRemoved(amm?: null): TypedEventFilter<[string], { amm: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    ShutdownAllAmms(blockNumber?: null): TypedEventFilter<[BigNumber], { blockNumber: BigNumber }>

    TokenAdded(tokenAddress?: null): TypedEventFilter<[string], { tokenAddress: string }>

    TokenRemoved(tokenAddress?: null): TypedEventFilter<[string], { tokenAddress: string }>

    Withdrawn(
      withdrawer?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { withdrawer: string; amount: BigNumber }>
  }

  estimateGas: {
    addAmm(_amm: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    exchange(overrides?: CallOverrides): Promise<BigNumber>

    getAllAmms(overrides?: CallOverrides): Promise<BigNumber>

    getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>

    inflationMonitor(overrides?: CallOverrides): Promise<BigNumber>

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<BigNumber>

    minter(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    perpToken(overrides?: CallOverrides): Promise<BigNumber>

    quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    removeAmm(_amm: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    removeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setExchange(
      _exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    shutdownAllAmm(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAllAmms(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getQuoteTokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

    inflationMonitor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    perpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeAmm(
      _amm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setExchange(
      _exchange: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    shutdownAllAmm(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
